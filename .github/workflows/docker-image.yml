name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code  
        uses: actions/checkout@v2

      - name: Set up Python  
        uses: actions/setup-python@v2
        with:
          python-version: 3.x 

      - name: Install dependencies  
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          chmod +x wait-for-it.sh
          
      - name: Install latest version of docker with experimental compose support
        run: |
          pip install docker-compose
          
      - name: Run Django tests  
        run: |
          python manage.py test

      - name: Build and push Docker image 
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build -t myproject .  
          docker tag myproject $DOCKER_USERNAME/myproject  
          docker push $DOCKER_USERNAME/myproject
          
      - name: Build Docker Compose
        run: |
          sudo docker compose up -d

      - name: Run Django tests  
        run: |
          python manage.py test

      - name: Down Docker Compose
        run: |
          sudo docker compose down

  deploy:
  
    needs: build 
    runs-on: ubuntu-latest
    steps:
      - name: message
        run: |
          echo "there must be your servers to deploy"
    
#     - name: Deploy to server
#       env:
#         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         SSH_USERNAME: your_server_username
#         SSH_HOST: your_server_ip_address
#       if: github.ref == 'refs/heads/main' # Deploy only when push to main
#       run: |
#         mkdir -p ~/.ssh
#         echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
#         chmod 600 ~/.ssh/id_rsa
#         ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
#         scp docker-compose.yml $SSH_USERNAME@$SSH_HOST:/path/to/your/docker-compose.yml
#         ssh $SSH_USERNAME@$SSH_HOST "docker-compose pull && docker-compose up -d"
        


#       - name: Login to Azure CLI
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Build and push Docker images
#         env:
#           REGISTRY: your-acr-name.azurecr.io  # Replace 'your-acr-name' with your ACR name
#           COMPOSE_FILE: path/to/docker-compose.yml  # Replace this with the path to your Docker Compose file
#         run: |
#           az acr login --name $REGISTRY
#           docker-compose -f $COMPOSE_FILE build
#           docker-compose -f $COMPOSE_FILE push


  stages:
  
    needs: build 
    runs-on: ubuntu-latest
    steps:
      - name: message
        run: |
          echo "there must be your servers to deploy"

  prod:
  
    needs:
      - deploy
      #- stages
    runs-on: ubuntu-latest
    steps:
      - name: message
        run: |
          echo "there must be your servers to deploy"
    



  send_message:
    name: Send telegram notification
    runs-on: ubuntu-latest
    needs: prod
    steps:
    
    - name: Send message
      uses: appleboy/telegram-action@v1
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} done!


        
